<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abhiram Viswamitra]]></title>
  <link href="http://viswamitra.github.io/atom.xml" rel="self"/>
  <link href="http://viswamitra.github.io/"/>
  <updated>2015-03-02T20:54:37+05:30</updated>
  <id>http://viswamitra.github.io/</id>
  <author>
    <name><![CDATA[Abhiram]]></name>
    <email><![CDATA[abhiram.visawamitra@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Throughput, Response Time and Money!]]></title>
    <link href="http://viswamitra.github.io/blog/2015/03/02/throughput-response-time-and-money/"/>
    <updated>2015-03-02T14:12:23+05:30</updated>
    <id>http://viswamitra.github.io/blog/2015/03/02/throughput-response-time-and-money</id>
    <content type="html"><![CDATA[<p>For any successful web service that runs on scale, two of the most important factors that need to be considered are - Throughput and Response Time. <em>Throughput</em> is the total requests that your web service can churn out to the world, where as <em>Response Time</em> is the time taken for single request to be executed on your server. Both of these contribute to the final goal - serving better scale.</p>

<p>However, there is a never ending debate about what is better, and when.</p>

<!--more-->


<p>If you ask an engineer working at a startup, the answer would probably be Response Time, since they need to make do with a limited set of resources. Where as if you ask an Engineering Manager from a multi billion dollar giant, you would probably hear, &ldquo;throw more machines at it.&rdquo; I&rsquo;m not saying that folks from bigger companies do not build their services well, but it all boils down to the amount of time and money they have in hand.</p>

<p>Scaling a system horizontally doesn&rsquo;t necessarily increase the response time. As very rightly pointed out <a href="http://use-the-index-luke.com/sql/testing-scalability/response-time-throughput-scaling-horizontal">here</a>, horizontal scaling is just like adding more lanes to a high traffic road. It need not necessarily make the traffic move faster, it just accomodates more traffic at any given time. But that would still serve the purpose. Because tuning your application to get that extra juice out of your apis, will take time and effort, and not everyone has it. Not every team, or business requirement caters to it. If business demands scale, easiest way would be to set up the service on an auto scaling architecture.</p>

<p>Let me give you an example, you wrote a service and it gives you a 300 ms response time. You believe you&rsquo;ve done an OK job, you are not specifically proud of this, and you&rsquo;ve done better jobs before. So, deadlines are approaching and you need to ship this out. Assuming that the IO on this is minimum, and the 300 ms is just CPU processing, you have a throughput of 3 requests per second per core. You extrapolate your numbers and give your manager the bill - number of machines needed. He takes your word and haunts dev ops for the machines. Heard the story before? May be you have :).</p>

<p><span class='pullquote-right' data-pullquote='What do you do, you throw more machines at it, and you move on with your life.'>
But, there is this little thing, that perfectionist conscience, that nags you in your dreams, asking you.. Have you tried it all? Is 300 ms the best your service can do? You know that it&rsquo;s not. You can definitely push it to a  200ms. That would boost your throughput by 66%. But, deadlines are approaching, you just take the easier route. You let the machines take care of it. What do you do, you throw more machines at it, and you move on with your life.
</span></p>

<p>I think, this problem goes deeper into the org philosophy. If the organisation&rsquo;s goals align to understand developer&rsquo;s conscience along with business needs, we will all be better developers, sleeping peacefully without dark haunting dreams about poorly written APIs. If not, well, we have a word for it, and its called tech debt.</p>

<p>Thanks to <a href="https://twitter.com/cmdr2">Shashank Sekhar</a> for patiently contributing to this rant. This does not add any business value, and neither does it solve a problem, but hey, it&rsquo;s out there and that&rsquo;s weight off my chest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Jetty Threads in Dropwizard]]></title>
    <link href="http://viswamitra.github.io/blog/2015/01/31/those-threads-in-dropwizard/"/>
    <updated>2015-01-31T02:18:19+05:30</updated>
    <id>http://viswamitra.github.io/blog/2015/01/31/those-threads-in-dropwizard</id>
    <content type="html"><![CDATA[<p>We use Dropwizard framework for writing web applications at work, as it is nifty, out of the box, and production ready. While this post is not about Dropwizard framework in specific, I would like to share some interesting insights into what I have learnt while configuring threads for Jetty, the HTTP server, which comes as a part of Dropwizard. Dropwizard takes a configuration based approach to set various module configurations for your application like logging, metrics, server details, database etc.</p>

<p>This post digs into detail about the thread configuration for Jetty in Dropwizard, and some results and observations from experiments.</p>

<!--more-->


<p>An example server settings configuration file looks like this:</p>

<figure class='code'><figcaption><span> (server_config.yml)</span> <a href='http://viswamitra.github.io/downloads/code/server_config.yml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">maxThreads</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'>  <span class="l-Scalar-Plain">minThreads</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'>  <span class="l-Scalar-Plain">applicationConnectors</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>      <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">14041</span>
</span><span class='line'>      <span class="l-Scalar-Plain">acceptorThreads</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selectorThreads</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">16</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adminConnectors</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>      <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">14042</span>
</span><span class='line'>  <span class="l-Scalar-Plain">requestLog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">timeZone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IST</span>
</span><span class='line'>    <span class="l-Scalar-Plain">appenders</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">file</span>
</span><span class='line'>        <span class="l-Scalar-Plain">currentLogFilename</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./logs/access.log</span>
</span><span class='line'>        <span class="l-Scalar-Plain">threshold</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INFO</span>
</span><span class='line'>        <span class="l-Scalar-Plain">archive</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">archivedLogFilenamePattern</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./logs/access-%d{yyyy-MM-dd-HH}.log.gz</span>
</span><span class='line'>        <span class="l-Scalar-Plain">archivedFileCount</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">50</span>
</span><span class='line'>        <span class="l-Scalar-Plain">timeZone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IST</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us go through some important things in this configuration file, in a little more detail:</p>

<p><em>MinThreads</em> - The minimum number of threads created at the start of its application.  <br/>
<em>MaxThreads</em> - The maximum number of threads that can be created by the application. (This will be on an on demand basis. More of this later). <br/>
<em>AcceptorThreads</em> - The threads that accept new connections from client. By default this will be set to numberOfCores/2. <br/>
<em>SelectorThreads</em> - The threads that look after the activity on a socket. This includes checking the IO activity on the socket. By default this will be set to numberOfCores.</p>

<p>Let me list out some of the experiments that I did with the thread configurations.
Note: I am running on a machine with 4 cores, and 8GB of RAM.</p>

<h2>Experiment-1:</h2>

<ul>
<li>minThread and maxThread set to 8.</li>
</ul>


<figure class='code'><figcaption><span>[setting only min and max threads]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server:
</span><span class='line'>  type: default
</span><span class='line'>  maxThreads: 8
</span><span class='line'>  minThreads: 8</span></code></pre></td></tr></table></div></figure>


<h3>Result:</h3>

<p><img src="http://viswamitra.github.io/images/posts/threads_8.jpg"></p>

<h3>Observation:</h3>

<p>dw-[18..21] are selector threads, and dw[22..23] are acceptor threads. There are other threads that are in waiting state, and dedicated threads allocated for admin port. So, for each connector, the min and max thread rule applies, keeping in bound of the default selector and acceptor thread configuration values (which is dependent on the number of cores your machine has). In this configuration, since there are acceptor threads available, connections are being made and requests are served.</p>

<h2>Experiment-2:</h2>

<ul>
<li>Set both MinThread and MaxThread values, and also the acceptorThread and selectorThread values.</li>
</ul>


<figure class='code'><figcaption><span>[setting only min and max threads]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server:
</span><span class='line'>  type: default
</span><span class='line'>  maxThreads: 8
</span><span class='line'>  minThreads: 8
</span><span class='line'>  applicationConnectors:
</span><span class='line'>    - type: http
</span><span class='line'>      port: 14041
</span><span class='line'>      acceptorThreads: 8
</span><span class='line'>      selectorThreads: 16</span></code></pre></td></tr></table></div></figure>


<h3>Result:</h3>

<p><img src="http://viswamitra.github.io/images/posts/thread_blocker.png"></p>

<h3>Observation:</h3>

<p>So, we see that selectorThreads take the preference, and dw-[18..25] are created first. Since our maxThread upper bound is set to 8, all the created 8 threads are only selector threads, we see that there are no acceptor threads created at all. We will not be able to establish any client connections and make calls, and any attempts to do so will block your client.</p>

<h2>Experiment-3:</h2>

<ul>
<li>setting the minThread and maxThread to really big values.</li>
</ul>


<figure class='code'><figcaption><span>[large lower and upper bounds for threads]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server:
</span><span class='line'>  type: default
</span><span class='line'>  maxThreads: 100
</span><span class='line'>  minThreads: 8
</span><span class='line'>  applicationConnectors:
</span><span class='line'>    - type: http
</span><span class='line'>      port: 14041
</span><span class='line'>      acceptorThreads: 50
</span><span class='line'>      selectorThreads: 50</span></code></pre></td></tr></table></div></figure>


<h3>Observation:</h3>

<p>Here, we have 50 acceptor and 50 selector threads created, as the configuration file says. The minThread configuration key is overridden by the acceptor/selector Thread configurations.</p>

<h2>Summing it up:</h2>

<ul>
<li>Selector Threads will be initialized first, and then if your configuration allows for more, acceptor threads will be created.</li>
<li>Number of selector threads will be equal to number of cores of your system, and acceptor threads will be (number of cores)/2, unless otherwise specified.</li>
<li>It is not recommended to hardwire acceptorThreads and selectorThread configuration values, unless you know what you are doing.</li>
<li>Rule of thumb is leave the thread configuration to default, and default max thread value is 1024.</li>
<li>The right number of acceptor threads is defined by the connection open/close rate. More the rate, more acceptors we want.</li>
<li>If the server is busy, (100K or more connections at a time), it is better to use more selectors to even out the connection load amongst selectors, each selector has a limit of 64k connections.</li>
</ul>


<h2>References:</h2>

<ul>
<li><a href="http://dropwizard.io/">Dropwizard</a></li>
<li><a href="http://eclipse.org/jetty/">Jetty</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Your Repository Layer]]></title>
    <link href="http://viswamitra.github.io/blog/2015/01/09/setting-up-your-repository-layer/"/>
    <updated>2015-01-09T02:28:38+05:30</updated>
    <id>http://viswamitra.github.io/blog/2015/01/09/setting-up-your-repository-layer</id>
    <content type="html"><![CDATA[<p>When writing a three tier enterprise application, you would always have to write a DAO or a Repository layer, which would interface with your transactional entities. Specifically in java enterprise world, when you are using ORMs, you would have to write repositories in JPA specification or use Hibernate directly. Many libraries have extensive support for both, but it is considered a general good practice to use JPA, as it is a specification and is vendor independent. After working on some similar enterprise applications, let me give you a brief gist of how I organize my repositories, so that the domain specific transactional methods are separated out of the ORM specific transactional methods.</p>

<!--more-->


<p>First let us set up a ORM independent repository interface, which defines the crud actions that we want our repositories to have.</p>

<figure class='code'><figcaption><span> (GenericRepositoryIface.java)</span> <a href='http://viswamitra.github.io/downloads/code/GenericRepositoryIface.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GenericRepositoryIface</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">ID</span> <span class="kd">extends</span> <span class="n">Serializable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">persist</span><span class="o">(</span><span class="n">T</span> <span class="n">entity</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">T</span> <span class="nf">findOne</span><span class="o">(</span><span class="n">ID</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, this interface has the basic crud methods of our entities. Adding generics makes it.. generic :).</p>

<p>Now, let us have a concrete implementation of this interface, which will implement these methods. I&rsquo;m going to use JPA specification here.</p>

<figure class='code'><figcaption><span> (GenericRepositoryImpl.java)</span> <a href='http://viswamitra.github.io/downloads/code/GenericRepositoryImpl.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericRepositoryImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">ID</span> <span class="kd">extends</span> <span class="n">Serializable</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">GenericRepositoryIface</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">ID</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">private</span> <span class="kd">final</span> <span class="n">EntityManager</span> <span class="n">entityManager</span><span class="o">;</span>         
</span><span class='line'>
</span><span class='line'>          <span class="kd">public</span> <span class="nf">SimpleJpaGenericRepository</span><span class="o">(</span><span class="n">EntityManager</span> <span class="n">entityManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">this</span><span class="o">.</span><span class="na">entityManager</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">;</span>     
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">protected</span> <span class="n">EntityManager</span> <span class="nf">getEntityManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">entityManager</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">persist</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">getEntityManager</span><span class="o">().</span><span class="na">persist</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">getEntityManager</span><span class="o">()</span>
</span><span class='line'>              <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">&quot;select x from &quot;</span> <span class="o">+</span> <span class="n">entityClass</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; x&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="n">ID</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">getEntityManager</span><span class="o">().</span><span class="na">find</span><span class="o">(</span><span class="n">entityClass</span><span class="o">,</span> <span class="n">id</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">getEntityManager</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class takes an EntityManager(which can be either Provided at the start of the application, or injected) and implements the methods from the interface.</p>

<p>Moving on, let us actually come to the domain specific repositories that actually deal with the domain Entities. As with the previous design, let us use interfaces to define the required methods, and have concrete implementations separately.</p>

<p>Let us have an AccountRepositoryInterface, which will find an account from the database, given necessary account details.</p>

<figure class='code'><figcaption><span> (AccountRepositoryIface.java)</span> <a href='http://viswamitra.github.io/downloads/code/AccountRepositoryIface.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AccountRepositoryIface</span> <span class="kd">extends</span> <span class="n">GenericRepositoryIface</span><span class="o">&lt;</span><span class="n">Account</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Account</span><span class="o">&gt;</span> <span class="nf">findAccount</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderItemId</span><span class="o">,</span> <span class="n">String</span> <span class="n">accountId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This interface contains one method - findAccount which searches based on orderItemId and accountId. Finally, let us have a concrete implementation of
this interface.</p>

<figure class='code'><figcaption><span> (AccountRepositoryImpl.java)</span> <a href='http://viswamitra.github.io/downloads/code/AccountRepositoryImpl.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountRepositoryImpl</span> <span class="kd">extends</span> <span class="n">GenericRepositoryImpl</span><span class="o">&lt;</span><span class="n">Account</span><span class="o">,</span><span class="n">Long</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">AccountRepositoryIface</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AccountRepositoryImpl</span><span class="o">(</span><span class="n">EntityManager</span> <span class="n">entityManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">entityManager</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Account</span><span class="o">&gt;</span> <span class="nf">findAccount</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderItemId</span><span class="o">,</span> <span class="n">String</span> <span class="n">accountId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="nf">getEntityManager</span><span class="o">().</span><span class="na">createQuery</span><span class="o">(</span><span class="s">&quot;select ft from Account ft where ft.orderItemId = :orderItemId and ft.accountId = :accountId&quot;</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">Account</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;orderItemId&quot;</span><span class="o">,</span> <span class="n">orderItemId</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;accountId&quot;</span><span class="o">,</span> <span class="n">accountId</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have neatly abstracted interfaces and concrete implementations, in both the domain specific repositories as well as crud based repositories. This kind of alignment will help writing focused domain repositories without being concerned about the internal crud methods, since they are abstracted out.</p>
]]></content>
  </entry>
  
</feed>
